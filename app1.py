# -*- coding: utf-8 -*-
"""
Created on Fri May  9 16:29:06 2025

@author: jahop
"""

import streamlit as st
from datetime import datetime, time
import pandas as pd
import base64

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema Front Desk BBVA", 
    layout="wide",
    page_icon="üè¶"
)

# Estilo de fondo
page_bg_img = """
<style>
[data-testid="stAppViewContainer"]{
background:
radial-gradient(black 15%, transparent 16%) 0 0,
radial-gradient(black 15%, transparent 16%) 8px 8px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 0 1px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 8px 9px;
background-color:#282828;
background-size:16px 16px;
</style>
"""

st.markdown(page_bg_img, unsafe_allow_html=True)




# T√≠tulo principal
st.title('üìã Sistema de Gesti√≥n para Front Desk - BBVA AutoMarket')

# Inicializar session_state para cada DataFrame si no existen
if 'registros_visitantes' not in st.session_state:
    st.session_state.registros_visitantes = pd.DataFrame(columns=["Nombre", "Documento", "Motivo", "Entrada", "Salida"])
    
if 'registros_citas' not in st.session_state:
    st.session_state.registros_citas = pd.DataFrame(columns=["Cliente", "Fecha", "Hora", "Motivo"])
    
if 'registros_documentos' not in st.session_state:
    st.session_state.registros_documentos = pd.DataFrame(columns=["Tipo", "Estado", "Observaciones", "Fecha"])
    
if 'registros_llamadas' not in st.session_state:
    st.session_state.registros_llamadas = pd.DataFrame(columns=["Tel√©fono", "Motivo", "Atendido por", "Detalles", "Fecha"])

# Funci√≥n para descargar DataFrames como CSV
def get_table_download_link(df, filename):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}">Descargar archivo CSV</a>'
    return href

# Sidebar - Secci√≥n de usuario
st.sidebar.markdown("## üë§ Javier horacio P√©rez Ric√°rdez")
st.sidebar.markdown("*Front Desk Manager*")
st.sidebar.markdown("---")

# Sidebar - Men√∫ de opciones
st.sidebar.markdown("## üöÄ Navegaci√≥n")
opcion = st.sidebar.selectbox('Seleccione una funci√≥n:', 
                            ['Registro de Visitantes', 
                             'Gesti√≥n de Citas', 
                             'Control Documental',
                             'Panel de Llamadas'])

# Sidebar - Secci√≥n de Ayuda
st.sidebar.markdown("---")
st.sidebar.markdown("## ‚ùì Ayuda")

with st.sidebar.expander("C√≥mo usar esta aplicaci√≥n"):
    st.markdown("""
    **Gu√≠a r√°pida:**
    
    1. **Seleccione una funci√≥n** en el men√∫ desplegable
    2. **Complete el formulario** correspondiente
    3. **Los datos se guardan autom√°ticamente** en la sesi√≥n actual
    4. **Exporte a CSV** cuando necesite guardar los registros
    
    **Funciones disponibles:**
    - üë• Registro de visitantes (entradas/salidas)
    - üìÖ Gesti√≥n de citas con clientes
    - üìÑ Control de documentos recibidos
    - üìû Registro de llamadas entrantes
    """)

with st.sidebar.expander("Soporte t√©cnico"):
    st.markdown("""
    **Para asistencia t√©cnica:**
    
    üìß Email: soporte@bbva.com  
    ‚òé Tel√©fono:  +55 5226 2663  
    üè¢ Oficina: Torre BBVA, CDMX
    
    **Horario de soporte:**
    Lunes a Viernes: 8:00 - 20:00
    """)

# Sidebar - Informaci√≥n del sistema
st.sidebar.markdown("---")
st.sidebar.markdown("""
**‚Ñπ Informaci√≥n del sistema**  
Versi√≥n: 1.1  
√öltima actualizaci√≥n: 09/05/2025  
Desarrollado por: **Javier Horacio P√©rez Ric√°rdez**  
""")

# Contenido principal seg√∫n la opci√≥n seleccionada
if opcion == 'Registro de Visitantes':
    st.header('üë• Registro de Visitantes')
    
    with st.form("registro_form"):
        col1, col2 = st.columns(2)
        with col1:
            nombre = st.text_input("Nombre completo*", help="Nombre y apellidos del visitante")
            documento = st.text_input("N√∫mero de documento*")
        with col2:
            motivo = st.selectbox("Motivo de la visita*", 
                                ["Compra de veh√≠culo", "Consulta de cr√©dito", "Entrega documentaci√≥n", "Otro"])
            hora_entrada = st.time_input("Hora de entrada*", datetime.now().time())
        
        submit_button = st.form_submit_button("Registrar Visitante")
        
        if submit_button:
            if nombre and documento:  # Validaci√≥n b√°sica
                nuevo_registro = pd.DataFrame([[nombre, documento, motivo, hora_entrada.strftime("%H:%M"), None]],
                                             columns=["Nombre", "Documento", "Motivo", "Entrada", "Salida"])
                st.session_state.registros_visitantes = pd.concat([st.session_state.registros_visitantes, nuevo_registro])
                st.success(f"‚úÖ Visitante {nombre} registrado correctamente a las {hora_entrada.strftime('%H:%M')}")
            else:
                st.error("Por favor complete los campos obligatorios (*)")
    
    # Secci√≥n para registrar salida
    st.subheader("Registrar Salida")
    if not st.session_state.registros_visitantes.empty:
        visitante_salida = st.selectbox("Seleccione visitante para registrar salida", 
                                       st.session_state.registros_visitantes["Nombre"])
        if st.button("Registrar Salida"):
            idx = st.session_state.registros_visitantes[st.session_state.registros_visitantes["Nombre"] == visitante_salida].index[0]
            st.session_state.registros_visitantes.at[idx, "Salida"] = datetime.now().strftime("%H:%M")
            st.success(f"Salida registrada para {visitante_salida}")
    
    st.subheader("üìä Registros del d√≠a")
    st.dataframe(st.session_state.registros_visitantes)
    
    if not st.session_state.registros_visitantes.empty:
        st.markdown(get_table_download_link(st.session_state.registros_visitantes, "registro_visitantes.csv"), unsafe_allow_html=True)

elif opcion == 'Gesti√≥n de Citas':
    st.header('üìÖ Gesti√≥n de Citas')
    
    with st.form("cita_form"):
        col1, col2 = st.columns(2)
        with col1:
            cliente = st.text_input("Nombre del cliente*")
            fecha = st.date_input("Fecha de la cita*", datetime.now())
        with col2:
            hora = st.time_input("Hora de la cita*", time(9, 0))
            motivo = st.text_area("Motivo de la cita*")
        
        submit_button = st.form_submit_button("Agendar Cita")
        
        if submit_button:
            if cliente and motivo:  # Validaci√≥n b√°sica
                nueva_cita = pd.DataFrame([[cliente, fecha.strftime("%Y-%m-%d"), hora.strftime("%H:%M"), motivo]],
                                         columns=["Cliente", "Fecha", "Hora", "Motivo"])
                st.session_state.registros_citas = pd.concat([st.session_state.registros_citas, nueva_cita])
                st.success(f"‚úÖ Cita agendada para {cliente} el {fecha} a las {hora.strftime('%H:%M')}")
            else:
                st.error("Por favor complete los campos obligatorios (*)")
    
    st.subheader("üìÖ Citas Agendadas")
    st.dataframe(st.session_state.registros_citas)
    
    if not st.session_state.registros_citas.empty:
        st.markdown(get_table_download_link(st.session_state.registros_citas, "registro_citas.csv"), unsafe_allow_html=True)

elif opcion == 'Control Documental':
    st.header('üìÑ Control Documental')
    
    with st.form("documento_form"):
        col1, col2 = st.columns(2)
        with col1:
            tipo_doc = st.selectbox("Tipo de documento*", 
                                  ["Contrato de compraventa", "Solicitud de cr√©dito", "Identificaci√≥n", "Otro"])
            estado = st.radio("Estado del documento*", ["Recibido", "Digitalizado", "Verificado", "Archivado"])
        with col2:
            observaciones = st.text_area("Observaciones")
        
        submit_button = st.form_submit_button("Registrar Documento")
        
        if submit_button:
            nuevo_documento = pd.DataFrame([[tipo_doc, estado, observaciones, datetime.now().strftime("%Y-%m-%d %H:%M")]],
                                         columns=["Tipo", "Estado", "Observaciones", "Fecha"])
            st.session_state.registros_documentos = pd.concat([st.session_state.registros_documentos, nuevo_documento])
            st.success("‚úÖ Documento registrado en el sistema")
    
    st.subheader("üìã Documentos Registrados")
    st.dataframe(st.session_state.registros_documentos)
    
    if not st.session_state.registros_documentos.empty:
        st.markdown(get_table_download_link(st.session_state.registros_documentos, "registro_documentos.csv"), unsafe_allow_html=True)

elif opcion == 'Panel de Llamadas':
    st.header('üìû Panel de Llamadas')
    
    with st.form("llamada_form"):
        col1, col2 = st.columns(2)
        with col1:
            telefono = st.text_input("N√∫mero telef√≥nico*")
            motivo = st.selectbox("Motivo de la llamada*", 
                                ["Consulta general", "Seguimiento de cr√©dito", "Agendar cita", "Reclamo"])
        with col2:
            atendido_por = st.text_input("Atendido por*", "Juan P√©rez")
            detalles = st.text_area("Detalles de la llamada*")
        
        submit_button = st.form_submit_button("Registrar Llamada")
        
        if submit_button:
            if telefono and detalles:  # Validaci√≥n b√°sica
                nueva_llamada = pd.DataFrame([[telefono, motivo, atendido_por, detalles, datetime.now().strftime("%Y-%m-%d %H:%M")]],
                                           columns=["Tel√©fono", "Motivo", "Atendido por", "Detalles", "Fecha"])
                st.session_state.registros_llamadas = pd.concat([st.session_state.registros_llamadas, nueva_llamada])
                st.success("‚úÖ Llamada registrada correctamente")
            else:
                st.error("Por favor complete los campos obligatorios (*)")
    
    st.subheader("üìû Llamadas Registradas")
    st.dataframe(st.session_state.registros_llamadas)
    
    if not st.session_state.registros_llamadas.empty:
        st.markdown(get_table_download_link(st.session_state.registros_llamadas, "registro_llamadas.csv"), unsafe_allow_html=True)

# Bot√≥n para resetear datos (solo para desarrollo)
if st.sidebar.button("‚ö†Ô∏è Resetear todos los datos"):
    st.session_state.registros_visitantes = pd.DataFrame(columns=["Nombre", "Documento", "Motivo", "Entrada", "Salida"])
    st.session_state.registros_citas = pd.DataFrame(columns=["Cliente", "Fecha", "Hora", "Motivo"])
    st.session_state.registros_documentos = pd.DataFrame(columns=["Tipo", "Estado", "Observaciones", "Fecha"])
    st.session_state.registros_llamadas = pd.DataFrame(columns=["Tel√©fono", "Motivo", "Atendido por", "Detalles", "Fecha"])
    st.sidebar.success("Todos los datos han sido reseteados")
